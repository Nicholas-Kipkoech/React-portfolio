{"ast":null,"code":"var _jsxFileName = \"/home/kipkoech/Desktop/projects/ReactPortolio/client/src/portfolio-container/Home/Header/Header.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { TOTAL_SCREENS, GET_SCREEN_INDEX } from \"../../../utilities/commonUtils\";\nimport ScrollService from \"../../../utilities/ScrollService\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./Header.css\";\n\nconst Header = () => {\n  /* STATES TO BE USED */\n  const [selectedScreen, setSelectedScreen] = useState(0);\n  const [showHeaderOptions, setShowHeaderOptions] = useState(false);\n\n  const updateCurrentScreen = currentScreen => {\n    if (!currentScreen || !currentScreen.screenInView) return;\n    let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\n    if (screenIndex < 0) return;\n    setSelectedScreen(screenIndex);\n  };\n  /* SUBSCRIPTIONS */\n\n\n  let currentScreenSubscription = ScrollService.currentScreenBroadcaster.subscribe(updateCurrentScreen);\n\n  const getHeaderOptions = () => {\n    return TOTAL_SCREENS.map((Screen, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: Screen.screen_name,\n      className: getHeaderOptionsClasses(i),\n      onClick: () => switchScreen(i, Screen),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, Screen.screen_name)));\n  };\n\n  const getHeaderOptionsClasses = index => {\n    let classes = \"header-option \";\n    if (index < TOTAL_SCREENS.length - 1) classes += \"header-option-seperator \";\n    if (selectedScreen === index) classes += \"selected-header-option \";\n    return classes;\n  };\n\n  const switchScreen = (index, screen) => {\n    let screenComponent = document.getElementById(screen.screen_name);\n    if (!screenComponent) return;\n    screenComponent.scrollIntoView({\n      behavior: \"smooth\"\n    });\n    setSelectedScreen(index);\n    setShowHeaderOptions(false);\n  };\n\n  useEffect(() => {\n    return () => {\n      /* UNSUBSCRIBE THE SUBSCRIPTIONS */\n      currentScreenSubscription.unsubscribe();\n    };\n  }, [currentScreenSubscription]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    onClick: () => setShowHeaderOptions(!showHeaderOptions),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-parent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-hamburger\",\n    onClick: () => setShowHeaderOptions(!showHeaderOptions),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    className: \"header-hamburger-bars\",\n    icon: faBars,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, \"NICHOLAS.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: showHeaderOptions ? \"header-options show-hamburger-options\" : \"header-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, getHeaderOptions())));\n};\n\nexport default Header;","map":{"version":3,"sources":["/home/kipkoech/Desktop/projects/ReactPortolio/client/src/portfolio-container/Home/Header/Header.js"],"names":["React","useState","useEffect","TOTAL_SCREENS","GET_SCREEN_INDEX","ScrollService","faBars","FontAwesomeIcon","Header","selectedScreen","setSelectedScreen","showHeaderOptions","setShowHeaderOptions","updateCurrentScreen","currentScreen","screenInView","screenIndex","currentScreenSubscription","currentScreenBroadcaster","subscribe","getHeaderOptions","map","Screen","i","screen_name","getHeaderOptionsClasses","switchScreen","index","classes","length","screen","screenComponent","document","getElementById","scrollIntoView","behavior","unsubscribe"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  TOTAL_SCREENS,\n  GET_SCREEN_INDEX,\n} from \"../../../utilities/commonUtils\";\nimport ScrollService from \"../../../utilities/ScrollService\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./Header.css\";\n\nconst Header = () => {\n  /* STATES TO BE USED */\n  const [selectedScreen, setSelectedScreen] = useState(0);\n  const [showHeaderOptions, setShowHeaderOptions] = useState(false);\n\n  const updateCurrentScreen = (currentScreen) => {\n    if (!currentScreen || !currentScreen.screenInView) return;\n\n    let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\n    if (screenIndex < 0) return;\n\n    setSelectedScreen(screenIndex);\n  };\n\n  /* SUBSCRIPTIONS */\n  let currentScreenSubscription =\n    ScrollService.currentScreenBroadcaster.subscribe(updateCurrentScreen);\n\n  const getHeaderOptions = () => {\n    return TOTAL_SCREENS.map((Screen, i) => (\n      <div\n        key={Screen.screen_name}\n        className={getHeaderOptionsClasses(i)}\n        onClick={() => switchScreen(i, Screen)}\n      >\n        <span>{Screen.screen_name}</span>\n      </div>\n    ));\n  };\n\n  const getHeaderOptionsClasses = (index) => {\n    let classes = \"header-option \";\n    if (index < TOTAL_SCREENS.length - 1) classes += \"header-option-seperator \";\n\n    if (selectedScreen === index) classes += \"selected-header-option \";\n\n    return classes;\n  };\n\n  const switchScreen = (index, screen) => {\n    let screenComponent = document.getElementById(screen.screen_name);\n    if (!screenComponent) return;\n\n    screenComponent.scrollIntoView({ behavior: \"smooth\" });\n    setSelectedScreen(index);\n    setShowHeaderOptions(false);\n  };\n\n  useEffect(() => {\n    return () => {\n      /* UNSUBSCRIBE THE SUBSCRIPTIONS */\n      currentScreenSubscription.unsubscribe();\n    };\n  }, [currentScreenSubscription]);\n\n  return (\n    <div\n      className=\"header-container\"\n      onClick={() => setShowHeaderOptions(!showHeaderOptions)}\n    >\n      <div className=\"header-parent\">\n        <div\n          className=\"header-hamburger\"\n          onClick={() => setShowHeaderOptions(!showHeaderOptions)}\n        >\n          <FontAwesomeIcon className=\"header-hamburger-bars\" icon={faBars} />\n        </div>\n        <div className=\"header-logo\">\n          <span>NICHOLAS.</span>\n        </div>\n        <div\n          className={\n            showHeaderOptions\n              ? \"header-options show-hamburger-options\"\n              : \"header-options\"\n          }\n        >\n          {getHeaderOptions()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}